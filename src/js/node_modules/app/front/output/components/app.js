/* app.js
    
    Main output application component.
*/

// Dependencies.
const { Component } = require("react"),
    Recipe = require("app/front/recipe.js"),
    immutable = require("app/all/immutable");

/* Output window main application component.
*/
class App extends Component {
    //
    // STATIC PROPERTIES
    //
    
    //
    // PROPERTIES
    //
    
    // Recipe card dimension properties.
    CARD_DIMENSIONS = {
        max: 0,
        min: 0,
        actual: 0,
        maxScale: 1,
        minScale: 0
    };
    
    // HTML element.
    _htmlElem = null;
    
    // Recipe card wrapper element.
    _wrapperElem = null;
    
    // Template card element for scale calculations.
    _templateCard = null;
    
    /* Constructor for App.
        
        props - Component properties.
    */
    constructor(props) {
        super(props);
        
        this.state = {
            recipe: new Recipe(props.recipe)
        };
    }
    
    /* Mount handler.
    */
    componentDidMount() {
        let dims = this.CARD_DIMENSIONS,
            cardWidth = parseInt(
                getComputedStyle(this._templateCard).width.replace(/\D+/g, ""),
                10
            );
        
        this._htmlElem = this.props.htmlElem;
        
        dims.max = this.props.max;
        dims.min = this.props.min;
        dims.actual = cardWidth;
        dims.maxScale = dims.max / cardWidth;
        dims.minScale = dims.min / cardWidth;
        
        immutable(this, "CARD_DIMENSIONS");
        
        window.addEventListener("resize", this.onResize);
        
        this.updateScale();
    }
    
    /* Unmount handler.
    */
    componentWillUnmount() {
        window.removeEventListener("resize", this.onResize);
        
        this.state.recipe && this.state.recipe.destroy();
        this.state.recipe = null;
        
        this._htmlElem = null;
        this._wrapperElem = null;
        this._templateCard = null;
    }
    
    //
    // STATIC METHODS
    //
    
    //
    // METHODS
    //
    
    /* Updates the recipe wrapper based on viewport size.
    */
    updateScale() {
        let { clientWidth: vWidth } = this._htmlElem,
            { actual, maxScale, minScale } = this.CARD_DIMENSIONS,
            { style: wrapperStyle } = this._wrapperElem,
            scale = vWidth / actual,
            origin = vWidth < actual ? "top left " : "top center";
        
        // Clamp
        switch (true) {
            case scale > maxScale:
                scale = maxScale;
                break;
            
            case scale < minScale:
                scale = minScale;
                break;
        }
        
        wrapperStyle.transformOrigin = origin;
        wrapperStyle.transform = `scale(${scale})`;
    }
    
    /* Window resize handler.
        
        e - Resize event.
    */
    onResize = (e) => {
        this.updateScale();
    };
    
    /* Renders the component.
    */
    render() {
        return (
            <section
                id="recipe-cards"
                ref={(r) => { this._wrapperElem = r; }}
            >
                
                <article
                    className="recipe-card ingredients grid"
                    ref={(r) => { this._templateCard = r; }}
                >
                    
                    <header className="row">
                        <h1 className="col-6">My Recipe 1</h1>
                        <h2 className="col-6">Ingredients</h2>
                    </header>
                    
                    <section className="columns row">
                        
                        <div className="column col-6">
                            
                            <ul>
                                <li>First ingredient</li>
                                <li>Second ingredient that has a lot more text than the other ingredients</li>
                                <li>Third ingredient</li>
                            </ul>
                            
                        </div>
                        
                        <div className="column col-6">
                            
                            <ul>
                                <li>Fourth ingredient</li>
                                <li>Fifth ingredient</li>
                                <li>Sixth ingredient a little longer</li>
                            </ul>
                            
                        </div>
                        
                    </section>
                    
                </article>
                
                <article className="recipe-card instructions grid">
                    
                    <header className="row">
                        
                        <h2 className="col-12">Instructions</h2>
                        
                    </header>
                    
                    <section className="columns row">
                        
                        <div className="column col-6">
                            
                            <p>This is a recipe that has a bunch of text. You can use <strong>strong text</strong>, <em>emphasized text</em>, and <span className="underline">underlined text</span>.</p>
                            
                            <ol>
                                <li>Step</li>
                                <li>By</li>
                                <li>Step</li>
                                <li>List</li>
                            </ol>
                            
                            <p>It's a lot of fun!</p>
                            
                        </div>
                        
                        <div className="column col-6">
                            
                            <ul>
                                <li>Fourth ingredient</li>
                                <li>Fifth ingredient</li>
                                <li>Sixth ingredient a little longer</li>
                            </ul>
                            
                        </div>
                        
                    </section>
                    
                </article>
                
            </section>
        );
    }
}

module.exports = App;
