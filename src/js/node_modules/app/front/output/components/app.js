/* app.js
    
    Main output application component.
*/

// Dependencies.
const { Component } = require("react"),
    Recipe = require("app/front/recipe.js"),
    Ingredients = require("app/front/output/components/ingredients-card.js"),
    Instructions = require("app/front/output/components/instructions-card.js"),
    immutable = require("app/all/immutable");

/* Output window main application component.
*/
class App extends Component {
    //
    // STATIC PROPERTIES
    //
    
    //
    // PROPERTIES
    //
    
    // Recipe card dimension properties.
    CARD_DIMENSIONS = {
        max: 0,
        min: 0,
        actual: 0,
        maxScale: 1,
        minScale: 0
    };
    
    // Recipe card text properties.
    CARD_TEXT = {
        font: {
            max: 16,
            min: 9
        },
        line: {
            max: 1.4,
            min: 1.2
        }
    };
    
    // HTML element.
    _htmlElem = null;
    
    // Recipe card wrapper element.
    _wrapperElem = null;
    
    // Template card element for scale calculations.
    _templateCard = null;
    
    /* Constructor for App.
        
        props - Component properties.
    */
    constructor(props) {
        super(props);
        
        this.state = {};
        
        props.recipe && this.loadRecipe(props.recipe, false);
    }
    
    /* Mount handler.
    */
    componentDidMount() {
        let dims = this.CARD_DIMENSIONS,
            cardWidth = parseInt(
                getComputedStyle(this._templateCard).width.replace(/\D+/g, ""),
                10
            );
        
        this._htmlElem = this.props.htmlElem;
        
        dims.max = this.props.max;
        dims.min = this.props.min;
        dims.actual = cardWidth;
        dims.maxScale = dims.max / cardWidth;
        dims.minScale = dims.min / cardWidth;
        
        immutable(this, "CARD_DIMENSIONS");
        
        window.addEventListener("resize", this.onResize);
        
        ipc.on("selected-recipe", this.ipcSelectedRecipe);
        
        this.loadRecipe(this.props.recipe);
        this.updateScale();
    }
    
    /* Unmount handler.
    */
    componentWillUnmount() {
        window.removeEventListener("resize", this.onResize);
        
        ipc.removeListener("selected-recipe", this.ipcSelectedRecipe);
        
        this.state.recipe && this.state.recipe.destroy();
        this.state.recipe = null;
        
        this._htmlElem = null;
        this._wrapperElem = null;
        this._templateCard = null;
    }
    
    //
    // STATIC METHODS
    //
    
    //
    // METHODS
    //
    
    /* Loads raw recipe data and updates the component.
        
        recipe - Raw recipe data or Recipe object to load. If falsy, the current
            recipe data will be unloded.
        
        update - See this.update().
    */
    loadRecipe(recipe, update) {
        if (!recipe) {
            this.update({
                id: "",
                name: "",
                ingredients: [],
                instructions: ""
            }, update);
            
            return;
        }
        
        if (!(recipe instanceof Recipe)) {
            recipe = new Recipe(recipe);
        }
        
        this.update({
            id: recipe.id,
            name: recipe.name,
            ingredients: recipe.ingredients.toArray(v => v.text),
            instructions: recipe.instructions
        }, update);
    }
    
    /* Updates component state with option to modify state property without
        calling this.setState().
        
        state - Object containing component state key/value pairs to update.
        
        update - True to update component with this.setState(), false to set
            state properties directly. Defaults to true.
    */
    update(state, update) {
        if (undefined === update || update) {
            this.setState(state);
        }
        else {
            for (let k in state) {
                if (!state.hasOwnProperty(k)) { continue; }
                
                this.state[k] = state[k];
            }
        }
    }
    
    /* Updates the recipe wrapper based on viewport size.
    */
    updateScale() {
        let { clientWidth: vWidth } = this._htmlElem,
            { actual, maxScale, minScale } = this.CARD_DIMENSIONS,
            { style: wrapperStyle } = this._wrapperElem,
            scale = vWidth / actual,
            origin = vWidth < actual ? "top left " : "top center";
        
        // Clamp
        switch (true) {
            case scale > maxScale:
                scale = maxScale;
                break;
            
            case scale < minScale:
                scale = minScale;
                break;
        }
        
        wrapperStyle.transformOrigin = origin;
        wrapperStyle.transform = `scale(${scale})`;
    }
    
    /* Window resize handler.
        
        e - Resize event.
    */
    onResize = (e) => {
        this.updateScale();
    };
    
    /* IPC 'selected-recipe' handler.
        
        event - IPC event.
        recipe - Loaded recipe data.
    */
    ipcSelectedRecipe = (event, recipe) => {
        this.loadRecipe(recipe);
    };
    
    /* Renders the component.
    */
    render() {
        let { font, line } = this.CARD_TEXT;
        
        return (
            <section
                id="recipe-cards"
                ref={(r) => { this._wrapperElem = r; }}
            >
                
                <Ingredients
                    name={this.state.name}
                    ingredients={this.state.ingredients}
                    font={{ ...font }}
                    line={{ ...line }}
                    ref={(r) => { r && (this._templateCard = r.elem); }}
                />
                
                <Instructions
                    instructions={this.state.instructions}
                    font={{ ...font }}
                    line={{ ...line }}
                />
                
            </section>
        );
    }
}

module.exports = App;
