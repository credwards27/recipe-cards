/* ingredients-card.js
    
    Recipe ingredients card.
*/

// Dependencies.
const Card = require("app/front/output/components/card.js");

/* Recipe ingredients card component.
*/
class IngredientsCard extends Card {
    //
    // STATIC PROPERTIES
    //
    
    //
    // PROPERTIES
    //
    
    // Reference to the card's top-level element.
    _elem = null;
    
    /* Unmount handler.
    */
    componentWillUnmount() {
        super.componentWillUnmount();
        
        this._elem = null;
    }
    
    //
    // STATIC METHODS
    //
    
    //
    // METHODS
    //
    
    /* Getter for _elem.
        
        Returns the top-level element for the component.
    */
    get elem() {
        return this._elem;
    }
    
    /* Gets an author DOM element for the card, if an author is defined.
        
        author - Recipe author string, if defined.
        half - True to return a half-width column, false to return full-width.
            Defaults to false.
        
        Returns a React DOM object containing the author text, or null if author
        is not defined.
    */
    getAuthorDom(author, half) {
        author = (typeof author === "string" ? author : "").trim();
        
        if (!author) {
            return null;
        }
        
        let possessive = String.fromCharCode(8217) +
            (author.match(/s$/i) ? "" : "s"),
            col = half ? "col-6" : "col-12";
        
        return (
            <h3 className={`author ${col}`}>{`${author}${possessive} Recipe`}</h3>
        );
    }
    
    /* Gets DOM elements for the ingredients list.
        
        ingredients - Ingredient string or array of strings. Falsy and
            non-string values will be skipped.
        
        Returns DOM structure for the ingredients list.
    */
    getIngredientsDom(ingredients) {
        ingredients = ingredients instanceof Array ?
            ingredients : [ ingredients ];
        
        ingredients = ingredients.filter((v) => {
            return (v && typeof v === "string");
        });
        
        let list = [],
            cutoff = ingredients.length > 5 ?
                Math.ceil(ingredients.length / 2) : ingredients.length,
            timestamp = Date.now();
        
        for (let i=0, l=ingredients.length; i<l; ++i) {
            let elem = <li
                key={`timestamp-${i}`}
                style={i === cutoff ? { breakBefore:"column" } : {}}
            >{ingredients[i]}</li>;
            
            list.push(elem);
        }
        
        return list;
    }
    
    /* Renders the component.
    */
    render() {
        let yieldText = (this.props.yield || "").trim(),
            author = this.getAuthorDom(this.props.author, yieldText),
            ingredients = this.getIngredientsDom(this.props.ingredients),
            yieldElem;
        
        if (yieldText) {
            let col = author ? "col-6" : "col-12";
            
            yieldElem = (
                <h3 className={`yield ${col}`}>{yieldText}</h3>
            );
        }
        
        return (
            <article
                className="recipe-card ingredients grid"
                ref={(r) => { this._elem = r; }}
            >
                
                <header className="row">
                    <h1 className="name col-6">{this.props.name}</h1>
                    <h2 className="ingredients col-6">Ingredients</h2>
                    {author}
                    {yieldElem}
                </header>
                
                <section
                    className="columns col-12"
                    ref={(r) => { this._resizeElem = r; }}
                >
                    
                    <ul className="allow-break">
                        {ingredients}
                    </ul>
                    
                </section>
                
            </article>
        );
    }
}

module.exports = IngredientsCard;
