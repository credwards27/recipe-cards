/* instructions-card.js
    
    Recipe instructions card.
*/

// Dependencies.
const Card = require("app/front/output/components/card.js"),
    { sanitize: purify } = require("dompurify"),
    ALLOWED_HTML = require("app/all/allowed-html.js");

/* Recipe instructions card component.
*/
class InstructionsCard extends Card {
    //
    // STATIC PROPERTIES
    //
    
    //
    // PROPERTIES
    //
    
    //
    // STATIC METHODS
    //
    
    //
    // METHODS
    //
    
    /* Gets DOM elements for the instructions list.
        
        instructions - Instruction string or array of strings. Falsy and
            non-string values will be skipped.
        
        Returns DOM structure for the instructions list.
    */
    sanitizeInstructions(instructions) {
        instructions = typeof instructions === "string" ? instructions : "";
        instructions = instructions.trim();
        
        instructions = purify(instructions, {
            ALLOWED_TAGS: Object.keys(ALLOWED_HTML)
        });
        
        return instructions;
    }
    
    /* Gets DOM elements for prep and cook time.
        
        prep - Prep time in minutes.
        cook - Cook time in minutes.
    */
    getTime(prep, cook) {
        let elems = [],
            props = [ "prep", "cook" ],
            labels = {
                prep: "Prep:",
                cook: "Cook:"
            },
            times = { prep, cook };
        
        for (let i=0, l=props.length; i<l; ++i) {
            let prop = props[i],
                time = times[prop],
                text = [],
                frac, hr, min, unit;
            
            if (time <= 0) {
                continue;
            }
            
            frac = (time / 60);
            hr = parseInt(frac, 10);
            min = parseInt(Math.round((frac - hr) * 60), 10);
            
            if (hr) {
                unit = hr === 1 ? "hour" : "hours";
                text.push(`${hr} ${unit}`);
            }
            
            if (min) {
                unit = min === 1 ? "minute" : "minutes";
                text.push(`${min} ${unit}`);
            }
            
            if (text.length) {
                elems.length && elems.push(<br key={`${prop}-br`}/>);
                
                elems.push(
                    <span key={prop}>
                        {labels[prop]}
                        {" "}
                        <span className="time">{text.join(", ")}</span>
                    </span>
                );
            }
        }
        
        if (!elems.length) {
            return null;
        }
        
        return (
            <h3 className="col-6">{elems}</h3>
        );
    }
    
    /* Renders the component.
    */
    render() {
        let instructions = this.sanitizeInstructions(this.props.instructions),
            time = this.getTime(this.props.prep, this.props.cook);
        
        return (
            <article
                className="recipe-card instructions grid"
                ref={(r) => { this._elem = r; }}
            >
                
                <header className="row">
                    
                    {time}
                    <h2 className={time ? "col-6" : "col-12"}>Instructions</h2>
                    
                </header>
                
                <section
                    className="columns col-12"
                    dangerouslySetInnerHTML={{ __html: instructions }}
                    ref={(r) => { this._resizeElem = r; }}
                ></section>
                
            </article>
        );
    }
}

module.exports = InstructionsCard;
