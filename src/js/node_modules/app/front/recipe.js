/* recipe.js
    
    Recipe object.
*/

// Dependencies.
const LinkedList = require("app/all/linked-list.js");

/* Recipe object.
*/
class Recipe {
    //
    // STATIC PROPERTIES
    //
    
    //
    // PROPERTIES
    //
    
    // Recipe identifier name.
    _name = "";
    
    // Recipe title.
    _title = "";
    
    // Ingredients list.
    _ingredients = new LinkedList();
    
    // Instructions text.
    _instructions = "";
    
    /* Constructor for Recipe.
        
        data - Raw data object for the recipe.
    */
    constructor(data) {
        if (!data || typeof data !== "object") {
            throw new Error("Recipe data must be an object.");
        }
        
        this.name = data.name;
        this.title = data.title;
        
        if (data.hasOwnProperty("ingredients")) {
            let ingredients = data.ingredients ? data.ingredients : [];
            
            ingredients = ingredients instanceof Array ?
                ingredients : [ ingredients ];
            
            for (let i=0, l=ingredients.length; i<l; ++i) {
                this.addIngredient(ingredients[i]);
            }
        }
        
        this.instructions = data.instructions;
    }
    
    /* Destructor for Recipe.
    */
    destroy() {
        this._ingredients.destroy();
        this._ingredients = null;
    }
    
    //
    // STATIC METHODS
    //
    
    //
    // METHODS
    //
    
    /* Getter for _name.
        
        Returns the current recipe name identifier.
    */
    get name() {
        return this._name;
    }
    
    /* Setter for _name.
        
        name - New recipe name identifier.
    */
    set name(name) {
        if (typeof name !== "string") {
            throw new Error("Recipe name identifier must be a string.");
        }
        
        this._name = name;
    }
    
    /* Getter for _title.
        
        Returns the current recipe title.
    */
    get title() {
        return this._title;
    }
    
    /* Setter for _title.
        
        title - New recipe title, or falsy to use name identifier as the title.
    */
    set title(title) {
        title = title || this.name;
        
        if (typeof title !== "string") {
            throw new Error("Recipe title must be a string.");
        }
        
        this._title = title;
    }
    
    /* Getter for _ingredients.
        
        NOTE: Do not modify this array directly; use Recipe.addIngredients() and
        Recipe.removeIngredients().
        
        Returns the list of ingredients for the recipe.
    */
    get ingredients() {
        return this._ingredients;
    }
    
    /* Setter for _ingredients.
        
        unused - Unused.
    */
    set ingredients(unused) {}
    
    /* Getter for _instructions.
        
        Returns the instructions HTML block for the recipe.
    */
    get instructions() {
        return this._instructions;
    }
    
    /* Setter for _instructions.
        
        html - Recipe instructions HTML string. If omitted, the recipe's
            instructions will be reset to an empty string.
    */
    set instructions(html) {
        html = html || "";
        
        if (typeof html !== "string") {
            throw new Error("Recipe instructions must be an HTML string.");
        }
        
        this._instructions = html;
    }
    
    /* Gets an element to render the recipe as a list item.
        
        list - List element into which to render the list item.
        
        Returns an HTMLElement representing the recipe data for a list context.
    */
    renderListItem(list) {
        let d = list.ownerDocument,
            elem = d.createElement("li"),
            temp1, temp2;
        
        // Title wrapper
        temp1 = d.createElement("div");
        temp1.classList.add("col-8");
        
        // Title
        temp2 = d.createElement("span");
        temp2.classList.add("title");
        temp2.textContent = this._title;
        
        temp1.appendChild(temp2);
        elem.appendChild(temp1);
        
        // Controls wrapper
        temp1 = d.createElement("div");
        temp1.classList.add("controls", "col-4");
        
        elem.appendChild(temp1);
        
        // Delete button
        temp2 = d.createElement("div");
        temp2.classList.add("delete", "col-1");
        temp2.textContent = "X";
        
        temp1.appendChild(temp2);
        
        // Move button
        temp2 = d.createElement("div");
        temp2.classList.add("move", "col-1");
        temp2.textContent = "=";
        
        temp1.appendChild(temp2);
        
        // Add element to the specified list
        list.appendChild(elem);
        
        return elem;
    }
    
    /* Adds one or more ingredients to the recipe.
        
        text - Ingredient text string to add. Must be a non-empty string, with
            at least one non-whitespace character.
        
        after - Optional existing ingredient node after which to add the new
            ingredient. If omitted or falsy, the new ingredient will be appended
            to the end of the list.
        
        Returns the newly added ingredient object, or undefined if the
        ingredient text is invalid.
    */
    addIngredient(text, after) {
        text = typeof text === "string" ? text.trim() : "";
        
        if (!text) {
            throw new Error("Ingredient text must be a non-empty string with " +
                "at least one non-whitespace character.");
            
            return;
        }
        
        let ingredient = {
            text: typeof text === "string" ? text.trim() : "",
            node: null
        };
        
        ingredient.node = this._ingredients.insert(ingredient, after);
        
        return ingredient;
    }
    
    /* Removes one or more ingredients from the recipe.
        
        NOTE: This is not optimized, consecutive indices are treated as
        individual removal operations. This shouldn't be an issue unless the
        recipe list contains thousands of items.
        
        ...indices - One or more index numbers of the ingredients to remove.
    */
    removeIngredients(...indices) {
        let list = this._list,
            subtract = 0;
        
        indices = indices
            .filter((v) => {
                return typeof v === "number";
            })
            .map((v) => {
                return parseInt(v, 10);
            })
            .unique()
            .sort();
        
        for (let i=0, l=indices.length; i<l; ++i) {
            list.splice(indices[i - (subtract++)], 1);
        }
    }
}

module.exports = Recipe;
