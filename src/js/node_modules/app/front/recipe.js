/* recipe.js
    
    Recipe data object.
*/

// Dependencies.
const {
    v4: uuid,
    validate: uuidValidate,
    version: uuidVersion
} = require("uuid"),
    
    LinkedList = require("app/all/linked-list.js");

/* Recipe data object.
*/
class Recipe {
    //
    // STATIC PROPERTIES
    //
    
    //
    // PROPERTIES
    //
    
    // Unique recipe ID.
    _id = null;
    
    // Recipe name.
    _name = "";
    
    // Ingredients list.
    _ingredients = new LinkedList();
    
    // Instructions text.
    _instructions = "";
    
    /* Constructor for Recipe.
        
        data - Raw recipe data.
            
            id - Recipe ID (UUIDv4) identifier. If omitted, the recipe will
                generate its own ID.
            
            name - Recipe name.
            
            ingredients - Optional ingredient string or array of strings.
            
            instructions - Optional instructions HTML text.
    */
    constructor(data) {
        if (!data || typeof data !== "object") {
            throw new Error("Recipe data must be an object.");
            return;
        }
        
        // Set or generate recipe ID
        let id = data.id;
        
        if (!uuidValidate(id) || 4 !== uuidVersion(id)) {
            id = uuid();
        }
        
        Object.defineProperty(this, "_id", {
            value: id,
            writable: false,
            configurable: false
        });
        
        // Validate and set data
        this.name = data.name;
        this.instructions = data.instructions;
        
        if (data.hasOwnProperty("ingredients")) {
            let ingredients = data.ingredients || [];
            
            ingredients = ingredients instanceof Array ?
                ingredients : [ ingredients ];
            
            for (let i=0, l=ingredients.length; i<l; ++i) {
                this.addIngredient(ingredients[i]);
            }
        }
    }
    
    /* Destructor for Recipe.
    */
    destroy() {
        this._ingredients.destroy();
        this._ingredients = null;
    }
    
    //
    // STATIC METHODS
    //
    
    //
    // METHODS
    //
    
    /* Getter for _id.
        
        Returns the ID for the recipe.
    */
    get id() {
        return this._id;
    }
    
    /* Getter for _name.
        
        Returns the current recipe name.
    */
    get name() {
        return this._name;
    }
    
    /* Setter for _name.
        
        name - New recipe name.
    */
    set name(name) {
        if (typeof name !== "string") {
            throw new Error("Recipe name must be a string.");
        }
        
        this._name = name;
    }
    
    /* Getter for _ingredients.
        
        NOTE: Do not modify this array directly; use Recipe.addIngredient() and
        Recipe.removeIngredients().
        
        Returns the list of ingredients for the recipe.
    */
    get ingredients() {
        return this._ingredients;
    }
    
    /* Setter for _ingredients.
        
        unused - Unused.
    */
    set ingredients(unused) {}
    
    /* Getter for _instructions.
        
        Returns the instructions HTML block for the recipe.
    */
    get instructions() {
        return this._instructions;
    }
    
    /* Setter for _instructions.
        
        html - Recipe instructions HTML string. If omitted, the recipe's
            instructions will be reset to an empty string.
    */
    set instructions(html) {
        html = html || "";
        
        if (typeof html !== "string") {
            throw new Error("Recipe instructions must be an HTML string.");
        }
        
        this._instructions = html;
    }
    
    /* Adds one or more ingredients to the recipe.
        
        text - Ingredient text string to add. Must be a non-empty string, with
            at least one non-whitespace character.
        
        after - Optional existing ingredient node after which to add the new
            ingredient. If omitted or falsy, the new ingredient will be appended
            to the end of the list.
        
        Returns the newly added ingredient object, or undefined if the
        ingredient text is invalid.
    */
    addIngredient(text, after) {
        text = typeof text === "string" ? text.trim() : "";
        
        if (!text) {
            throw new Error("Ingredient text must be a non-empty string with " +
                "at least one non-whitespace character.");
            
            return;
        }
        
        let ingredient = {
            text: typeof text === "string" ? text.trim() : "",
            node: null
        };
        
        ingredient.node = this._ingredients.insert(ingredient, after);
        
        return ingredient;
    }
    
    /* Removes one or more ingredients from the recipe.
        
        NOTE: This is not optimized, consecutive indices are treated as
        individual removal operations. This shouldn't be an issue unless the
        recipe list contains thousands of items.
        
        ...indices - One or more index numbers of the ingredients to remove.
    */
    removeIngredients(...indices) {
        let list = this._list,
            subtract = 0;
        
        indices = indices
            .filter((v) => {
                return typeof v === "number";
            })
            .map((v) => {
                return parseInt(v, 10);
            })
            .unique()
            .sort();
        
        for (let i=0, l=indices.length; i<l; ++i) {
            list.splice(indices[i - (subtract++)], 1);
        }
    }
}

module.exports = Recipe;
