/* recipe.js
    
    Recipe data object.
*/

// Dependencies.
const {
    v4: uuid,
    validate: uuidValidate,
    version: uuidVersion
} = require("uuid"),
    
    LinkedList = require("app/all/linked-list.js"),
    immutable = require("app/all/immutable.js");

/* Recipe data object.
*/
class Recipe {
    //
    // STATIC PROPERTIES
    //
    
    //
    // PROPERTIES
    //
    
    // Unique recipe ID.
    _id = null;
    
    // Recipe name.
    _name = "";
    
    // Recipe author.
    _author = "";
    
    // Recipe yield.
    _yield = "";
    
    // Prep time in minutes.
    _prep = 0;
    
    // Cook time in minutes.
    _cook = 0;
    
    // Ingredients list.
    _ingredients = new LinkedList();
    
    // Instructions text.
    _instructions = "";
    
    /* Constructor for Recipe.
        
        data - Raw recipe data.
            
            id - Recipe ID (UUIDv4) identifier. If omitted, the recipe will
                generate its own ID.
            
            name - Recipe name.
            
            ingredients - Optional ingredient string or array of strings.
            
            instructions - Optional instructions HTML text.
    */
    constructor(data) {
        if (!data || typeof data !== "object") {
            throw new Error("Recipe data must be an object.");
            return;
        }
        
        // Copy data from existing recipe.
        if (data instanceof Recipe) {
            data = data.serialize();
        }
        
        // Set or generate recipe ID
        let id = data.id;
        
        if (!uuidValidate(id) || 4 !== uuidVersion(id)) {
            id = uuid();
        }
        
        immutable(this, { _id: id }, "_ingredients");
        
        // Validate and set data
        this.name = data.name;
        this.author = data.author;
        this.yield = data.yield;
        this.prep = data.prep;
        this.cook = data.cook;
        this.instructions = data.instructions;
        
        if (data.hasOwnProperty("ingredients")) {
            let ingredients = data.ingredients || [];
            
            ingredients = ingredients instanceof Array ?
                ingredients : [ ingredients ];
            
            for (let i=0, l=ingredients.length; i<l; ++i) {
                this.addIngredient(ingredients[i]);
            }
        }
    }
    
    /* Destructor for Recipe.
    */
    destroy() {
        this._ingredients.destroy();
    }
    
    //
    // STATIC METHODS
    //
    
    //
    // METHODS
    //
    
    /* Getter for _id.
        
        Returns the ID for the recipe.
    */
    get id() {
        return this._id;
    }
    
    /* Getter for _name.
        
        Returns the current recipe name.
    */
    get name() {
        return this._name;
    }
    
    /* Setter for _name.
        
        name - New recipe name.
    */
    set name(name) {
        if (typeof name !== "string") {
            throw new Error("Recipe name must be a string.");
        }
        
        this._name = name.trim();
    }
    
    /* Getter for _author.
        
        Returns the recipe author.
    */
    get author() {
        return this._author;
    }
    
    /* Setter for _author.
        
        author - New recipe author name.
    */
    set author(author) {
        this._author = (typeof author === "string" ? author : "").trim();
    }
    
    /* Getter for _yield.
        
        Returns the recipe's yield, if specified.
    */
    get yield() {
        return this._yield;
    }
    
    /* Setter for _yield.
        
        text - New yield description.
    */
    set yield(text) {
        this._yield = (typeof text === "string" ? text : "").trim();
    }
    
    /* Getter for _prep.
        
        Returns a prep time object for the recipe.
    */
    get prep() {
        return this._prep;
    }
    
    /* Setter for _prep.
        
        min - New time in minutes.
    */
    set prep(min) {
        min = typeof min === "number" ? parseInt(min, 10) : 0;
        this._prep = min > 0 ? min : 0;
    }
    
    /* Getter for _cook.
        
        Returns a cook time object for the recipe.
    */
    get cook() {
        return this._cook;
    }
    
    /* Setter for _cook.
        
        min - New time in minutes.
    */
    set cook(min) {
        min = typeof min === "number" ? parseInt(min, 10) : 0;
        this._cook = min > 0 ? min : 0;
    }
    
    /* Getter for _ingredients.
        
        NOTE: Do not modify this array directly; use Recipe.addIngredient() and
        Recipe.removeIngredients().
        
        Returns the list of ingredients for the recipe.
    */
    get ingredients() {
        return this._ingredients;
    }
    
    /* Getter for _instructions.
        
        Returns the instructions HTML block for the recipe.
    */
    get instructions() {
        return this._instructions;
    }
    
    /* Setter for _instructions.
        
        html - Recipe instructions HTML string. If omitted, the recipe's
            instructions will be reset to an empty string.
    */
    set instructions(html) {
        html = html || "";
        
        if (typeof html !== "string") {
            throw new Error("Recipe instructions must be an HTML string.");
        }
        
        this._instructions = html.trim();
    }
    
    /* Adds one or more ingredients to the recipe.
        
        text - Ingredient text string to add. Must be a non-empty string, with
            at least one non-whitespace character.
        
        after - Optional existing ingredient node after which to add the new
            ingredient. If omitted or falsy, the new ingredient will be appended
            to the end of the list.
        
        Returns the newly added ingredient object, or undefined if the
        ingredient text is invalid.
    */
    addIngredient(text, after) {
        text = typeof text === "string" ? text.trim() : "";
        
        if (!text) {
            throw new Error("Ingredient text must be a non-empty string with " +
                "at least one non-whitespace character.");
            
            return;
        }
        
        let ingredient = {
            text: text,
            node: null
        };
        
        ingredient.node = this._ingredients.insert(ingredient, after);
        
        return ingredient;
    }
    
    /* Removes one or more ingredients from the recipe.
        
        ...ingredients - One or more ingredient objects to remove. The
            ingredient must belong to the recipe's ingredients list in order to
            be removed. See Recipe.addIngredient().
    */
    removeIngredients(...ingredients) {
        let ingredientsList = this._ingredients;
        
        for (let i=0, l=ingredients.length; i<l; ++i) {
            let ingredient = ingredients[i],
                node = ingredient.node;
            
            node && ingredientsList.remove(node);
            ingredient.node = null;
        }
    }
    
    /* Gets the serialized recipe data.
        
        Returns recipe data serialized for transmission.
    */
    serialize() {
        return {
            id: this.id,
            name: this.name,
            author: this.author,
            yield: this.yield,
            prep: this.prep,
            cook: this.cook,
            ingredients: this.ingredients.toArray(v => v.text),
            instructions: this.instructions
        };
    }
}

module.exports = Recipe;
