/* recipe-list.js
    
    Recipe list object.
*/

// Dependencies.
const Component = require("react").Component,
    LinkedList = require("app/all/linked-list.js"),
    Recipe = require("app/front/recipe.js");

/* Recipe list component.
*/
class RecipeList extends Component {
    //
    // STATIC PROPERTIES
    //
    
    //
    // PROPERTIES
    //
    
    // Component mounted state.
    _isMounted = false;
    
    // Internal recipe array.
    _list = new LinkedList();
    
    /* Constructor for RecipeList.
        
        props - Component properties.
            
            recipes - Array of recipe data objects.
    */
    constructor(props) {
        super(props);
        
        let { recipes } = props;
        
        if (recipes) {
            recipes = recipes instanceof Array ? recipes : [ recipes ];
        }
        else {
            recipes = [];
        }
        
        this.state = {
            list: this._list
        };
        
        for (let i=0, l=recipes.length; i<l; ++i) {
            this.addRecipe(recipes[i]);
        }
    }
    
    /* Mount handler.
    */
    componentDidMount() {
        this._isMounted = true;
        this._update();
    }
    
    /* Destructor for RecipeList.
    */
    componentWillUnmount() {
        this._list.destroy();
        this._list = null;
        this._isMounted = false;
    }
    
    //
    // STATIC METHODS
    //
    
    //
    // METHODS
    //
    
    /* Getter for _list.
        
        Returns the internal array of recipes.
    */
    get list() {
        return this._list;
    }
    
    /* Setter for _list (don't overwrite the list array directly, this will
        break things).
        
        unused - Unused.
    */
    set list(unused) {}
    
    /* Adds a recipe to the list.
        
        recipe - Raw recipe data to add to the list.
        
        after - Optional existing recipe object in the list after which to add
            the new recipe. If omitted, the new recipe will be appended to the
            end of the list.
        
        Returns the list node containing the newly-added recipe.
    */
    addRecipe(recipe, after) {
        if (!(recipe instanceof Recipe)) {
            recipe = new Recipe(recipe);
        }
        
        let node;
        
        if (after instanceof Recipe) {
            node = this._list.insert(recipe, after);
        }
        else {
            node = this._list.push(recipe);
        }
        
        this._update();
        
        return node;
    }
    
    /* Removes a recipe from the list.
        
        node - List node containing the recipe to remove. Node must belong to
            this recipe list.
    */
    removeRecipe(node) {
        this._list.remove(node);
        this._update();
    }
    
    /* Updates the component list state.
    */
    _update() {
        this._isMounted && this.setState(this.state);
    }
    
    /* Renders the recipe list.
    */
    render() {
        let recipes = [],
            index = 0;
        
        this._list.each((r) => {
            recipes.push(
                <li key={index++}>
                    <div className="col-8">
                        <span className="title">{r.title}</span>
                    </div>
                    <div className="controls col-4">
                        <div className="delete col-1">X</div>
                        <div className="move col-1">=</div>
                    </div>
                </li>
            );
        });
        
        return (
            <ol className="recipe-list grid">
                {recipes}
            </ol>
        );
    }
}

module.exports = RecipeList;
