/* app.js
    
    Main browser application component.
*/

// Dependencies.
const { Component } = require("react"),
    LinkedList = require("app/all/linked-list.js"),
    RecipeNode = require("app/front/recipe-node.js"),
    BrowserForm = require("app/front/browser/components/browser-form.js"),
    RecipeList = require("app/front/browser/components/recipe-list.js");

/* Browser application component.
*/
class App extends Component {
    //
    // STATIC PROPERTIES
    //
    
    //
    // PROPERTIES
    //
    
    /* Constructor for App.
    */
    constructor(props) {
        super(props);
        
        this.state = {
            recipes: new LinkedList()
        };
    }
    
    /* Mount handler.
    */
    componentDidMount() {
        let data = document.getElementById("test-data");
        
        data = JSON.parse(data.innerText.trim());
        
        this.loadRecipes(data);
    }
    
    /* Destructor.
    */
    componentWillUnmount() {
        this.state.recipes.destroy();
        this.state.recipes = null;
    }
    
    //
    // STATIC METHODS
    //
    
    //
    // METHODS
    //
    
    /* Gets the recipe list from the component's state.
        
        Returns the internal list of recipes.
    */
    get recipes() {
        return this.state.recipes;
    }
    
    /* Loads recipe data.
        
        data - Raw recipe file data.
    */
    loadRecipes(data) {
        // Removea all existing data
        this.recipes.removeAll(false, (r) => {
            r.destroy();
        });
        
        let { recipes } = data;
        
        if (recipes) {
            recipes = recipes instanceof Array ? recipes : [ recipes ];
        }
        else {
            recipes = [];
        }
        
        for (let i=0, l=recipes.length; i<l; ++i) {
            this.addRecipe(recipes[i], null, false);
        }
        
        this.forceUpdate();
    }
    
    /* Adds a recipe to the list.
        
        recipe - Raw recipe data to add to the list.
        
        after - Optional existing RecipeNode object in the list after which to
            add the new recipe. If omitted, the new recipe will be appended to
            the end of the list.
        
        Returns the list node containing the newly-added recipe.
    */
    addRecipe(recipe, after, render) {
        if (!(recipe instanceof RecipeNode)) {
            recipe = new RecipeNode(recipe);
        }
        
        let node;
        
        if (after instanceof RecipeNode) {
            node = this.recipes.insert(recipe, after.node);
        }
        else {
            node = this.recipes.push(recipe);
        }
        
        recipe.node = node;
        
        if (undefined === render || render) {
            this.forceUpdate();
        }
        
        return node;
    }
    
    /* Removes a recipe from the list.
        
        recipe - RecipeNode object to remove. The recipe must belong to the
            app's list in order to remove it.
        
        render - See RecipeList.addRecipe().
    */
    removeRecipe(recipe, render) {
        this.recipes.remove(recipe.node);
        
        if (undefined === render || render) {
            this.forceUpdate();
        }
    }
    
    /* Renders the component.
    */
    render() {
        return (
            <main className="grid">
                <BrowserForm />
                <RecipeList
                    recipes={this.state.recipes}
                />
            </main>
        );
    }
}

module.exports = App;
