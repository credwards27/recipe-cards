/* app.js
    
    Main browser application component.
*/

// Dependencies.
const { Component } = require("react"),
    LinkedList = require("app/all/linked-list.js"),
    Recipe = require("app/front/recipe.js"),
    BrowserForm = require("app/front/browser/components/browser-form.js"),
    RecipeList = require("app/front/browser/components/recipe-list.js");

/* Browser application component.
*/
class App extends Component {
    //
    // STATIC PROPERTIES
    //
    
    //
    // PROPERTIES
    //
    
    // Main application DOM element.
    _elem = null;
    
    /* Constructor for App.
    */
    constructor(props) {
        super(props);
        
        this.state = {
            recipes: new LinkedList()
        };
    }
    
    /* Mount handler.
    */
    async componentDidMount() {
        ipc.on("updated-recipe-list", this.ipcUpdatedRecipeList);
        ipc.on("loaded-file-error", this.ipcLoadedFileError);
        
        // Render recipes if a file is already open
        try {
            let recipes = await ipc.invoke("get-current-recipes");
            recipes.length && this.loadRecipes(recipes);
        }
        catch (e) {}
    }
    
    /* Destructor.
    */
    componentWillUnmount() {
        this.state.recipes.destroy();
        this.state.recipes = null;
        
        ipc.removeListener("updated-recipe-liste", this.ipcUpdatedRecipeList);
        ipc.removeListener("loaded-file-error", this.ipcLoadedFileError);
        
        this._elem = null;
    }
    
    //
    // STATIC METHODS
    //
    
    //
    // METHODS
    //
    
    /* Gets the recipe list from the component's state.
        
        Returns the internal list of recipes.
    */
    get recipes() {
        return this.state.recipes;
    }
    
    /* Loads recipe data.
        
        recipes - Raw recipe data object or an array of data object.
    */
    loadRecipes(recipes) {
        recipes = recipes instanceof Array ? recipes : [ recipes ];
        
        let recipeList = this.recipes;
        
        // Remove all existing data
        recipeList.removeAll(false, (r) => {
            r.destroy();
        });
        
        for (let i=0, l=recipes.length; i<l; ++i) {
            recipeList.push(new Recipe(recipes[i]));
        }
        
        this.forceUpdate();
    }
    
    /* IPC 'updated-recipe-list' listener.
        
        event - IPC event.
        recipes - Updated recipe list.
    */
    ipcUpdatedRecipeList = (event, recipes) => {
        this.loadRecipes(recipes);
    };
    
    /* IPC 'loaded-file-error' listener.
        
        event - IPC event.
        msg - Error message.
    */
    ipcLoadedFileError = (event, msg) => {
        alert(msg);
    };
    
    /* Renders the component.
    */
    render() {
        return (
            <div
                className="grid"
                ref={(r) => { this._elem = r; }}
            >
                <BrowserForm />
                <RecipeList
                    recipes={this.state.recipes}
                />
            </div>
        );
    }
}

module.exports = App;
