/* recipe-list.js
    
    Recipe list object.
*/

// Dependencies.
const { Component } = require("react"),
    LinkedList = require("app/all/linked-list.js"),
    RecipeListItem = require("app/front/browser/components/" +
        "recipe-list-item.js");

/* Recipe list component.
*/
class RecipeList extends Component {
    //
    // STATIC PROPERTIES
    //
    
    //
    // PROPERTIES
    //
    
    // Internal recipe array.
    _list = new LinkedList();
    
    /* Mount handler.
    */
    componentDidMount() {
        // Initialize recipe list data
        let { recipes } = this.props;
        
        if (recipes) {
            recipes = recipes instanceof Array ? recipes : [ recipes ];
        }
        else {
            recipes = [];
        }
        
        this.setState({
            list: this._list
        });
        
        for (let i=0, l=recipes.length; i<l; ++i) {
            this.addRecipe(recipes[i]);
        }
    }
    
    /* Destructor.
    */
    componentWillUnmount() {
        this._list.destroy();
        this._list = null;
    }
    
    //
    // STATIC METHODS
    //
    
    //
    // METHODS
    //
    
    /* Getter for _list.
        
        Returns the internal array of recipes.
    */
    get list() {
        return this._list;
    }
    
    /* Setter for _list (don't overwrite the list array directly, this will
        break things).
        
        unused - Unused.
    */
    set list(unused) {}
    
    /* Adds a recipe to the list.
        
        recipe - Raw recipe data to add to the list.
        
        after - Optional existing recipe object in the list after which to add
            the new recipe. If omitted, the new recipe will be appended to the
            end of the list.
        
        Returns the list node containing the newly-added recipe.
    */
    addRecipe(recipe, after) {
        if (!(recipe instanceof RecipeListItem)) {
            recipe = new RecipeListItem(recipe);
        }
        
        let node;
        
        if (after instanceof RecipeListItem) {
            node = this._list.insert(recipe, after);
        }
        else {
            node = this._list.push(recipe);
        }
        
        this.forceUpdate();
        
        return node;
    }
    
    /* Removes a recipe from the list.
        
        node - List node containing the recipe to remove. Node must belong to
            this recipe list.
    */
    removeRecipe(node) {
        this._list.remove(node);
        this.forceUpdate();
    }
    
    /* Renders the recipe list.
    */
    render() {
        let recipes = [],
            index = 0;
        
        this._list.each((item) => {
            let recipe = item.recipe;
            
            recipes.push(
                <RecipeListItem
                    key={index++}
                    name={recipe.name}
                    title={recipe.title}
                />
            );
        });
        
        return (
            <ol className="recipe-list grid">
                {recipes}
            </ol>
        );
    }
}

module.exports = RecipeList;
