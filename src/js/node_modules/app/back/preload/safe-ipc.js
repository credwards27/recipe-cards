/* safe-ipc.js
    
    Whitelisted ipcRenderer object.
*/

// Dependencies.
const { contextBridge, ipcRenderer } = require("electron");

/* Validates a channel against a given whitelist.
    
    channel - IPC channel string to validate.
    whitelist - Object containing whitelisted channel strings as keys. All
        values must be truthy.
    
    Returns true if channel is whitelisted, or throws an error if not
    whitelisted.
*/
function validateChannel(channel, whitelist) {
    if (!whitelist[channel]) {
        throw new Error(`Channel '${channel}' is not valid.`);
    }
    
    return true;
}

/* Creates a context bridge to invoke/handle whitelisted ipcRenderer channels.
    
    channels - String or array of string IPC channels to whitelist.
    name - Optional object name to use on the BrowserWindow window object.
        Defaults to 'ipc'.
*/
module.exports = (channels, name) => {
    channels = typeof channels === "string" ? [ channels ] : channels;
    name = (typeof name === "string" ? name : "ipc").trim();
    
    if (!(channels instanceof Array)) {
        throw new Error("Specified channels are invalid or missing.");
    }
    
    if (!name) {
        throw new Error("Specified object name is invalid (must be a non-" +
            "empty string with at least 1 non-whitespace character).");
    }
    
    // Convert the channels array into a whitelist object
    const whitelist = channels.reduce((obj, curr) => {
        curr = (typeof curr === "string" ? curr : "").trim();
        curr && (obj[curr] = true);
        
        return obj;
    }, {});
    
    Object.freeze(whitelist);
    
    if (!Object.keys(whitelist).length) {
        throw new Error("No valid channel strings provided (must be non-" +
            "empty strings with at least 1 non-whitespace character).");
    }
    
    // Create the safe helper object
    contextBridge.exposeInMainWorld(
        name,
        {
            /* Invokes a whitelisted IPC channel.
                
                channel - IPC channel string to invoke.
                ...args - Arguments to pass to the IPC channel.
            */
            invoke: async(channel, ...args) => {
                validateChannel(channel, whitelist);
                return await ipcRenderer.invoke(channel, ...args);
            },
            
            /* Attaches an invokable handler to a whitelisted IPC channel.
                
                channel - IPC channel string to handle.
                listener - Listener function to attach to the channel.
            */
            handle: async(channel, cb) => {
                validateChannel(channel, whitelist);
                ipcRenderer.handle(channel, cb);
            }
        }
    );
};
