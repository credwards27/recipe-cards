/* app-manager.js
    
    Main application data manager. Application-wide data management and
    communication is controlled by this module.
*/

// Dependencies.
const {
    ipcMain: ipc,
    dialog
} = require("electron"),
    { promisify } = require("util"),
    fs = require("fs"),
    path = require("path"),
    readFileAsync = promisify(fs.readFile),
    { getWindow } = require("app/back/window-manager.js");

/* Application manager class.
*/
class AppManager {
    //
    // STATIC PROPERTIES
    //
    
    //
    // PROPERTIES
    //
    
    /* Constructor for AppManager.
    */
    constructor() {
        ipc.handle("open-file", this.ipcOpenFile);
    }
    
    /* Destructor for AppManager.
    */
    destroy() {
        ipc.removeHandler("open-file");
    }
    
    //
    // STATIC METHODS
    //
    
    //
    // METHODS
    //
    
    /* IPC 'open-file' handler.
    */
    ipcOpenFile = async (event, windowName) => {
        let fileData = {
            canceled: false,
            data: ""
        },
            win, result;
        
        try {
            win = await getWindow(windowName, false);
        }
        catch (e) {}
        
        // Show the file dialog
        try {
            result = await dialog.showOpenDialog(win?.instance, {
                buttonLabel: "Open Recipes",
                filters: [
                    {
                        name: "Recipe Packs",
                        extensions: [ "recipe-pack" ]
                    },
                    {
                        name: "All Files",
                        extensions: [ "*" ]
                    }
                ],
                properties: [ "openFile" ]
            });
        }
        catch (e) {}
        
        fileData.canceled = (result.canceled || !result.filePaths.length);
        
        if (fileData.canceled) {
            return fileData;
        }
        
        // Read the file
        try {
            fileData.data = await readFileAsync(result.filePaths[0], "utf8");
        }
        catch (e) {
            let fileName = result.filePaths[0].match(
                new RegExp(`[^${path.sep}]+$`)
            );
            
            fileName = fileName ? fileName[0] : "";
            
            throw new Error(`File '${fileName}' could not be opened.`);
        }
        
        return fileData;
    };
}

module.exports = AppManager;
