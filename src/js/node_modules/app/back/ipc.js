/* ipc.js
    
    IPC channels.
*/

// Dependencies.
const {
    ipcMain: ipc,
    dialog,
    BrowserWindow
} = require("electron"),
    { promisify } = require("util"),
    fs = require("fs"),
    path = require("path"),
    readFileAsync = promisify(fs.readFile),
    { getWindow } = require("app/back/window-manager.js");

/* Opens a file using a dialog for a given browser window instance.
    
    event - IPC message event.
    windowName - Optional window name to which to attach the dialog as a modal.
        See getWindow().
*/
ipc.handle("open-file", async (event, windowName) => {
    let fileData = {
        canceled: false,
        data: ""
    },
        win, result;
    
    try {
        win = await getWindow(windowName, false);
    }
    catch (e) {}
    
    // Show the file dialog
    try {
        result = await dialog.showOpenDialog(win?.instance, {
            buttonLabel: "Open Recipes",
            filters: [
                {
                    name: "Recipe Packs",
                    extensions: [ "recipe-pack" ]
                },
                {
                    name: "All Files",
                    extensions: [ "*" ]
                }
            ],
            properties: [ "openFile" ]
        });
    }
    catch (e) {}
    
    fileData.canceled = (result.canceled || !result.filePaths.length);
    
    if (fileData.canceled) {
        return fileData;
    }
    
    // Read the file
    try {
        fileData.data = await readFileAsync(result.filePaths[0], "utf8");
    }
    catch (e) {
        let fileName = result.filePaths[0].match(
            new RegExp(`[^${path.sep}]+$`)
        );
        
        fileName = fileName ? fileName[0] : "";
        
        throw new Error(`File '${fileName}' could not be opened.`);
    }
    
    return fileData;
});
