/* window-manager.js
    
    Electron window manager.
*/

// Dependencies.
const { app, BrowserWindow } = require("electron"),
    appConfig = require("electron-settings"),
    path = require("path"),
    fs = require("fs");

// Application root path.
const PATH_ROOT = app.getAppPath(),
    
    // Collection of window objects and associated data.
    WINDOWS = {
        browser: null,
        inspector: null,
        output: null
    };

/* Retrieves a BrowserWindow instance for a supported name, or creates one if it
    does not exist.
    
    name - Window identifier to create or retrieve. See sanitizeWindowName().
    
    Returns a promise resolving to the BrowserWindow object associated with
    'name'.
*/
async function getWindow(name) {
    name = sanitizeWindowName(name);
    
    if (!name) {
        throw new Error(`Window name '${name}' is not supported`);
        return;
    }
    
    if (WINDOWS[name]) {
        return WINDOWS[name];
    }
    
    let win, config, handler;
    
    try {
        config = await getWindowConfig(name);
        
        // Create default config if necessary
        config = config ?? await setWindowConfig(name);
    }
    catch (e) {}
    
    config = getFullConfig(config, name);
    
    // Initialize window
    win = WINDOWS[name] = {
        instance: new BrowserWindow(config),
        saveTimeout: null
    };
    
    win.instance.loadFile(`${PATH_ROOT}/dist/${name}.html`);
    
    saveWindowState(name);
    
    // Attach event handlers
    handler = ((name) => {
        return async (e) => {
            let win;
            
            try {
                win = await getWindow(name);
            }
            catch (e) {}
            
            if (null !== win.saveTimeout) {
                clearTimeout(win.saveTimeout);
            }
            
            win.saveTimeout = setTimeout(() => {
                clearTimeout(win.saveTimeout);
                saveWindowState(name);
            }, 500);
        };
    })(name);
    
    win.instance.on("resize", handler);
    win.instance.on("move", handler);
    
    win.instance.on("close", ((name) => {
        return () => {
            saveWindowState(name);
        };
    })(name));
    
    return win;
}

/* Gets config data for a BrowserWindow.
    
    name - Window name. See getWindow().
    
    Returns a promise resolving to a config object for the specified window.
*/
async function getWindowConfig(name) {
    name = sanitizeWindowName(name, false);
    
    if (!name) {
        return null;
    }
    
    try {
        let config = await appConfig.get(`windows.${name}`);
        return config ? config : null;
    }
    catch (e) {
        return null;
    }
}

/* Sets config data for a BrowserWindow.
    
    name - Window name. See getWindow().
    data - Config data object for the window, formatted for electron-settings.
        If not specified, the default config data will be used.
    
    Returns a promise resolving to the updated window config data, or null if
    the specified window name is not supported.
*/
async function setWindowConfig(name, data) {
    name = sanitizeWindowName(name);
    
    if (!name) {
        return null;
    }
    
    // Use default config if necessary
    data = data || {
        x: undefined,
        y: undefined,
        width: 600,
        height: 800,
        isMaximized: false
    };
    
    try {
        await appConfig.set(`windows.${name}`, data);
        return data;
    }
    catch (e) {
        return null;
    }
}

/* Gets a full BrowserWindow config object.
    
    config - BrowserWindow config object (from getWindowConfig(), etc.).
    name - Window name. See sanitizeWindowName(). This does not fall back to the
        default window name.
*/
function getFullConfig(config, name) {
    name = sanitizeWindowName(name, false);
    
    let fullConfig = {
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true,
            enableRemoteModule: false
        }
    };
    
    for (let k in config) {
        if (!config.hasOwnProperty(k)) { continue; }
        fullConfig[k] = config[k];
    }
    
    // Add preload path if a file exists for the given window name and
    // config.webPreferences.preload is not already specified
    if (name) {
        let preload = path.join(
            PATH_ROOT,
            `src/js/node_modules/app/back/preload/windows/${name}.js`
        ),
            stat = fs.statSync(preload);
        
        if (stat.isFile() && typeof fullConfig.webPreferences === "object") {
            let webPrefs = fullConfig.webPreferences;
            
            if (!webPrefs.hasOwnProperty("preload")) {
                webPrefs.preload = preload;
            }
        }
    }
    
    return fullConfig;
}

/* Saves a window state.
    
    name - Window name. See sanitizeWindowName().
*/
async function saveWindowState(name) {
    let win, config;
    
    try {
        win = await getWindow(name)
    }
    catch (e) {
        return;
    }
    
    if (!win) {
        return;
    }
    
    win = win.instance;
    
    config = win.getBounds();
    config.isMaximized = win.isMaximized();
    
    setWindowConfig(name, config);
}

/* Sanitizes a window name.
    
    name - Window name string for a BrowserWindow instance. If not provided, the
        default window name "browser" will be returned.
    
    useDefault - True to sanitize to the default window name if 'name' is
        undefined. False to sanitize as-is. Defaults to true.
    
    Returns the sanitized name if it matches a supported window name, or false
    if the provided name is not supported.
*/
function sanitizeWindowName(name, useDefault) {
    if (useDefault || undefined === useDefault) {
        name = undefined === name ? "browser" : name;
    }
    
    name = (typeof name === "string" ? name : "").toLowerCase();
    
    return WINDOWS.hasOwnProperty(name) ? name : false;
}

module.exports = {
    getWindow,
    getWindowConfig,
    setWindowConfig,
    saveWindowState,
    sanitizeWindowName
};
