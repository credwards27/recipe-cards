/* window-manager.js
    
    Electron window manager.
*/

// Dependencies.
const { app, BrowserWindow } = require("electron"),
    appConfig = require("electron-settings"),
    DEV_MODE = require("electron-is-dev"),
    path = require("path"),
    fs = require("fs");

// Application root path.
const PATH_ROOT = app.getAppPath(),
    
    // Collection of window objects and associated data.
    WINDOWS = {
        browser: null,
        inspector: null,
        output: null
    },
    
    // Unbound BrowserWindow event handlers. When bound, [this] for each
    // function will be an object containing the window name and window data
    // from getWindow().
    HANDLERS = {};

/* Retrieves a BrowserWindow instance for a supported name, or creates one if it
    does not exist.
    
    name - Window identifier to create or retrieve. See sanitizeWindowName().
    init - True to initialize a window if does not yet exist, false to retrieve
        an existing window object only. Defaults to true.
    
    Returns a promise resolving to the BrowserWindow object associated with
    'name'.
*/
async function getWindow(name, init) {
    name = sanitizeWindowName(name);
    init = (init || undefined === init);
    
    if (!name) {
        throw new Error(`Window name '${name}' is not supported`);
        return;
    }
    
    if (WINDOWS[name]) {
        return WINDOWS[name];
    }
    
    if (!init) {
        return;
    }
    
    let win, config, handler;
    
    try {
        config = await getWindowConfig(name);
        
        // Create default config if necessary
        config = config ?? await setWindowConfig(name);
    }
    catch (e) {}
    
    config = getFullConfig(config, name);
    
    // Initialize window
    win = WINDOWS[name] = {
        instance: new BrowserWindow(config),
        saveTimeout: null
    };
    
    bindHandlers(
        name,
        "resize",
        "move",
        {
            event: "ready-to-show",
            bind: DEV_MODE ? "once" : "on"
        },
        "close",
        "closed"
    );
    
    win.instance.loadFile(`${PATH_ROOT}/dist/${name}.html`);
    
    saveWindowState(name);
    
    return win;
}

/* Removes a window data object from the cache.
    
    name - Window name. See sanitizeWindowName().
*/
function removeWindow(name) {
    name = name = sanitizeWindowName(name);
    
    if (!name) {
        return;
    }
    
    let data = WINDOWS[name];
    
    if (!data) {
        return;
    }
    
    data.instance = null;
    WINDOWS[name] = null;
}

/* Gets config data for a BrowserWindow.
    
    name - Window name. See getWindow().
    
    Returns a promise resolving to a config object for the specified window.
*/
async function getWindowConfig(name) {
    name = sanitizeWindowName(name, false);
    
    if (!name) {
        return null;
    }
    
    try {
        let config = await appConfig.get(`windows.${name}`);
        return config ? config : null;
    }
    catch (e) {
        return null;
    }
}

/* Sets config data for a BrowserWindow.
    
    name - Window name. See getWindow().
    data - Config data object for the window, formatted for electron-settings.
        If not specified, the default config data will be used.
    
    Returns a promise resolving to the updated window config data, or null if
    the specified window name is not supported.
*/
async function setWindowConfig(name, data) {
    name = sanitizeWindowName(name);
    
    if (!name) {
        return null;
    }
    
    // Use default config if necessary
    data = data || {
        x: undefined,
        y: undefined,
        width: 600,
        height: 800,
        isMaximized: false
    };
    
    try {
        await appConfig.set(`windows.${name}`, data);
        return data;
    }
    catch (e) {
        return null;
    }
}

/* Gets a full BrowserWindow config object.
    
    config - BrowserWindow config object (from getWindowConfig(), etc.).
    name - Window name. See sanitizeWindowName(). This does not fall back to the
        default window name.
*/
function getFullConfig(config, name) {
    name = sanitizeWindowName(name, false);
    
    let fullConfig = {
        show: false,
        webPreferences: {
            nodeIntegration: false,
            contextIsolation: true,
            enableRemoteModule: false
        }
    };
    
    for (let k in config) {
        if (!config.hasOwnProperty(k)) { continue; }
        fullConfig[k] = config[k];
    }
    
    // Add preload path if a file exists for the given window name and
    // config.webPreferences.preload is not already specified
    if (name) {
        let preload = path.join(
            PATH_ROOT,
            `src/js/node_modules/app/back/preload/windows/${name}.js`
        ),
            stat = fs.statSync(preload);
        
        if (stat.isFile() && typeof fullConfig.webPreferences === "object") {
            let webPrefs = fullConfig.webPreferences;
            
            if (!webPrefs.hasOwnProperty("preload")) {
                webPrefs.preload = preload;
            }
        }
    }
    
    return fullConfig;
}

/* Saves a window state.
    
    name - Window name. See sanitizeWindowName().
*/
async function saveWindowState(name) {
    let win, config;
    
    try {
        win = await getWindow(name)
    }
    catch (e) {
        return;
    }
    
    if (!win) {
        return;
    }
    
    win = win.instance;
    
    config = win.getBounds();
    config.isMaximized = win.isMaximized();
    
    setWindowConfig(name, config);
}

/* Sanitizes a window name.
    
    name - Window name string for a BrowserWindow instance. If not provided, the
        default window name "browser" will be returned.
    
    useDefault - True to sanitize to the default window name if 'name' is
        undefined. False to sanitize as-is. Defaults to true.
    
    Returns the sanitized name if it matches a supported window name, or false
    if the provided name is not supported.
*/
function sanitizeWindowName(name, useDefault) {
    if (useDefault || undefined === useDefault) {
        name = undefined === name ? "browser" : name;
    }
    
    name = (typeof name === "string" ? name : "").toLowerCase();
    
    return WINDOWS.hasOwnProperty(name) ? name : false;
}

/* Binds a BrowserWindow instance to one or more event handlers. By default,
    events are bound using win.on().
    
    name - Window name. See sanitizeWindowName(). The name must be a supported
        window name, and a BrowserWindow instance must already exist for the
        name.
    
    ...events - One or more BrowserWindow events to bind. Each event argument
        can be in one of the following formats:
        
        <string> - BrowserWindow event string, to be bound with win.on().
        
        <object> - Object containing the following properties:
            
            event - BrowserWindow event string to bind.
            bind - EventEmitter binding method name ("on" or "once"). Defaults
                to "on".
*/
async function bindHandlers(name, ...events) {
    let winData, win;
    
    try {
        winData = await getWindow(name, false);
        win = winData.instance;
    }
    catch (e) {
        return;
    }
    
    if (!(win instanceof BrowserWindow)) {
        throw new Error("Argument is not a BrowserWindow instance.");
    }
    
    for (let i=0, l=events.length; i<l; ++i) {
        let event = events[i],
            method = "on",
            handler;
        
        if (typeof event === "object") {
            method = event.bind || method;
            event = event.event;
        }
        
        // Skip if invalid binding method name
        if ("on" !== method && "once" !== method) {
            continue;
        }
        
        handler = HANDLERS[event];
        
        // Skip if event does not have a supported handler
        if (typeof handler !== "function") {
            continue;
        }
        
        win[method](event, handler.bind({
            name: name,
            win: winData
        }));
    }
}

/* Window resize handler.
*/
HANDLERS.resize = function() {
    let win = this.win;
    
    if (null !== win.saveTimeout) {
        clearTimeout(win.saveTimeout);
    }
    
    win.saveTimeout = setTimeout(() => {
        clearTimeout(win.saveTimeout);
        saveWindowState(this.name);
    }, 500);
};

// Use resize handler for window move event.
HANDLERS.move = HANDLERS.resize;

/* Window 'ready-to-show' handler.
*/
HANDLERS["ready-to-show"] = function() {
    //
    // DEBUG
    //
    
    this.win.instance.webContents.openDevTools();
    
    //
    // END DEBUG
    //
    
    this.win.instance.show();
};

/* Window close handler.
*/
HANDLERS.close = function() {
    saveWindowState(this.name);
};

/* Window close handler.
*/
HANDLERS.closed = function() {
    removeWindow(this.name);
};

module.exports = {
    getWindow,
    getWindowConfig,
    setWindowConfig,
    saveWindowState,
    sanitizeWindowName
};
